/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.biskot.app.contract.api;

import com.biskot.app.contract.model.AddItemRequest;
import com.biskot.app.contract.model.CartResponse;
import com.biskot.domain.model.Cart;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "Cart", description = "the Cart API")
public interface CartApi {

    /**
     * PUT /carts/{cartId}/items : Add/update items in the cart.
     *
     * @param cartId Cart ID (required)
     * @param addItemRequest  (required)
     * @return Item added (status code 200)
     *         or Business rules have not been respected (status code 400)
     *         or Cart or product not found (status code 404)
     */
    @ApiOperation(value = "Add/update items in the cart.", nickname = "addItemToCart", notes = "", tags={ "Cart", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Item added"),
        @ApiResponse(code = 400, message = "Business rules have not been respected"),
        @ApiResponse(code = 404, message = "Cart or product not found") })
    @RequestMapping(value = "/carts/{cartId}/items",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> addItemToCart(@ApiParam(value = "Cart ID",required=true) @PathVariable("cartId") Long cartId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody AddItemRequest addItemRequest);


    /**
     * POST /carts : Create a cart.
     *
     * @return Cart initialized (status code 200)
     */
    @ApiOperation(value = "Create a cart.", nickname = "createCart", notes = "", tags={ "Cart", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Cart initialized") })
    @RequestMapping(value = "/carts",
        method = RequestMethod.POST)
    ResponseEntity<Void> createCart(@RequestBody Cart cart);


    /**
     * GET /carts/{cartId} : Retrieve a cart
     *
     * @param cartId Cart ID (required)
     * @return Cart retrieved (status code 200)
     *         or Cart not found (status code 404)
     */
    @ApiOperation(value = "Retrieve a cart", nickname = "getCart", notes = "", response = CartResponse.class, tags={ "Cart", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Cart retrieved", response = CartResponse.class),
        @ApiResponse(code = 404, message = "Cart not found") })
    @RequestMapping(value = "/carts/{cartId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CartResponse> getCart(@ApiParam(value = "Cart ID",required=true) @PathVariable("cartId") Long cartId);

}
